var searchIndex = JSON.parse('{\
"cv":{"doc":"This library primarily provides a binding and API for â€¦","t":[0,3,12,12,12,12,12,12,3,11,11,3,12,12,11,3,12,12,11,3,12,12,11,3,12,12,3,12,12,12,12,11,11,11,3,12,12,12,12,11,4,13,13,13,13,4,13,13,13,8,10,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,11,11,4,13,13,13,13,13,13,13,13,4,13,13,3,11,0,4,3,12,12,12,11,11,4,3,12,12,11,11,11,11,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,13,13,13,0,3,4,13,13,3,4,13,13,13,13,13,3,3,3,3,3,3,3,8,10,0,8,8,10,10,3,11,3,11,3,11,3,11,3,11,3,11,0,5,5,6,6,5,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,8,10,0,4,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,0,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,0,4,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,18,0,8,10,3,11,11,11,11,11,4,3,11,11,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,11,11,0,0,11,0,0,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,3,11,11,11,11,11,11,4,13,13,13,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["core","KeyPoint","point","size","angle","response","octave","class_id","Scalar","new","all","Point2i","x","y","new","Point2f","x","y","new","Size2i","width","height","new","Size2f","width","height","Rect","x","y","width","height","new","scale","normalize_to_mat","Rect2f","x","y","width","height","normalize_to_mat","LineType","Filled","Line4","Line8","LineAA","FlipCode","XAxis","YAxis","XYAxis","FromBytes","from_bytes","CvType","Cv8UC1","Cv8SC1","Cv16UC1","Cv16SC1","Cv32SC1","Cv32FC1","Cv64FC1","Cv8UC2","Cv8UC3","Cv8SC3","Cv16UC3","Cv16SC3","Cv32SC3","Cv32FC3","Cv64FC3","RotatedRect","points","bounding_rect","NormType","Inf","L1","L2","L2Sqr","Hamming","Hamming2","Relative","MinMax","TermType","Count","EPS","TermCriteria","new","cuda","CGpuMat","GpuMat","cols","rows","depth","default","upload","CGpuHog","GpuHog","params","return_score","new","return_score","with_params","set_svm_detector","CGpuCascade","GpuCascade","from_path","detect_multiscale","set_find_largest_object","set_max_num_objects","set_min_neighbors","set_max_object_size","set_min_object_size","set_scale_factor","get_classifier_size","get_find_largest_object_flag","get_max_num_objects","get_min_neighbors","get_max_object_size","get_min_object_size","get_scale_factor","errors","CvError","InvalidPath","EntryNotFound","UnknownError","UnicodeChars","features2d","BOWKMeansTrainer","KMeansCenters","Random","Pp","DMatch","DescriptorMatcherType","BruteForce","BruteForceL1","BruteForceHamming","BruteForceHamming2","FlannBased","DescriptorMatcher","MSER","MSERBuilder","SIFT","SIFTBuilder","SURF","SURFBuilder","Feature2D","detect_and_compute","hash","HashImplInterface","Hash","compute","compare","AverageHash","new","BlockMeanHash","new","ColorMomentHash","new","MarrHildrethHash","new","PHash","new","RadialVarianceHash","new","highgui","highgui_named_window","highgui_destroy_window","MouseCallbackData","MouseCallback","highgui_set_mouse_callback","WindowFlag","Normal","Autosize","Opengl","FreeRatio","MouseEventType","MouseMove","LButtonDown","RButtonDown","MButtonDown","LButtonUp","RButtonUp","MButtonUp","LButtonClick","RButtonClick","MButtonClick","MouseWheel","MouseHWheel","Show","show","imgcodecs","ImageReadMode","Unchanged","Grayscale","Color","AnyDepth","AnyColor","LoadGdal","ReducedGrayscale2","ReducedColor2","ReducedGrayscale4","ReducedColor4","ReducedGrayscale8","ReducedColor8","ImageWriteMode","JpegQuality","JpegProgressive","JpegOptimize","JpegRstInterval","JpegLumaQuality","JpegChromaQuality","PngCompression","PngStrategy","PngBilevel","PxmBinary","WebpQuality","PamTupletype","ImageWritePngStrategy","Default","Filtered","HuffmanOnly","RLE","Fixed","imgproc","HistogramComparisionMethod","Correlation","ChiSquare","Intersection","Bhattacharyya","ChiSquareAlternative","KullbackLeiblerDivergence","ThresholdType","Binary","BinaryInv","Trunc","ToZero","ToZeroInv","Mask","Otsu","Triangle","ColorConversion","BGR2BGRA","BGRA2BGR","BGR2RGBA","RGBA2BGR","BGR2RGB","BGRA2RGBA","BGR2GRAY","RGB2GRAY","GRAY2BGR","GRAY2BGRA","BGRA2GRAY","RGBA2GRAY","BGR2BGR565","RGB2BGR565","BGR5652BGR","BGR5652RGB","BGRA2BGR565","RGBA2BGR565","BGR5652BGRA","BGR5652RGBA","GRAY2BGR565","BGR5652GRAY","BGR2BGR555","RGB2BGR555","BGR5552BGR","BGR5552RGB","BGRA2BGR555","RGBA2BGR555","BGR5552BGRA","BGR5552RGBA","GRAY2BGR555","BGR5552GRAY","BGR2XYZ","RGB2XYZ","XYZ2BGR","XYZ2RGB","BGR2YCrCb","RGB2YCrCb","YCrCb2BGR","YCrCb2RGB","BGR2HSV","RGB2HSV","BGR2Lab","RGB2Lab","BGR2Luv","RGB2Luv","BGR2HLS","RGB2HLS","HSV2BGR","HSV2RGB","Lab2BGR","Lab2RGB","Luv2BGR","Luv2RGB","HLS2BGR","HLS2RGB","BGR2HSV_FULL","RGB2HSV_FULL","BGR2HLS_FULL","RGB2HLS_FULL","HSV2BGR_FULL","HSV2RGB_FULL","HLS2BGR_FULL","HLS2RGB_FULL","LBGR2Lab","LRGB2Lab","LBGR2Luv","LRGB2Luv","Lab2LBGR","Lab2LRGB","Luv2LBGR","Luv2LRGB","BGR2YUV","RGB2YUV","YUV2BGR","YUV2RGB","YUV2RGB_NV12","YUV2BGR_NV12","YUV2RGB_NV21","YUV2BGR_NV21","YUV2RGBA_NV12","YUV2BGRA_NV12","YUV2RGBA_NV21","YUV2BGRA_NV21","YUV2RGB_YV12","YUV2BGR_YV12","YUV2RGB_IYUV","YUV2BGR_IYUV","YUV2RGBA_YV12","YUV2BGRA_YV12","YUV2RGBA_IYUV","YUV2BGRA_IYUV","YUV2GRAY_420","YUV2RGB_UYVY","YUV2BGR_UYVY","YUV2RGBA_UYVY","YUV2BGRA_UYVY","YUV2RGB_YUY2","YUV2BGR_YUY2","YUV2RGB_YVYU","YUV2BGR_YVYU","YUV2RGBA_YUY2","YUV2BGRA_YUY2","YUV2RGBA_YVYU","YUV2BGRA_YVYU","YUV2GRAY_UYVY","YUV2GRAY_YUY2","RGBA2mRGBA","mRGBA2RGBA","RGB2YUV_I420","BGR2YUV_I420","RGBA2YUV_I420","BGRA2YUV_I420","RGB2YUV_YV12","BGR2YUV_YV12","RGBA2YUV_YV12","BGRA2YUV_YV12","BayerBG2BGR","BayerGB2BGR","BayerRG2BGR","BayerGR2BGR","BayerBG2GRAY","BayerGB2GRAY","BayerRG2GRAY","BayerGR2GRAY","BayerBG2BGR_VNG","BayerGB2BGR_VNG","BayerRG2BGR_VNG","BayerGR2BGR_VNG","BayerBG2BGR_EA","BayerGB2BGR_EA","BayerRG2BGR_EA","BayerGR2BGR_EA","COLORCVT_MAX","InterpolationFlag","InterNearst","InterLinear","InterCubic","InterArea","InterLanczos4","InterLinearExact","InterMax","WarpFillOutliers","WarpInverseMap","mat","CMat","Mat","cols","rows","depth","channels","from_file_storage","new","from_buffer","with_size","zeros","data","total","elem_size","elem_size1","step1","size","is_valid","roi","flip","cv_type","eye","at","at2","at3","in_range","min_max_loc","mix_channels","normalize","count_non_zero","copy_make_border","BorderType","Constant","Replicate","Reflect","Wrap","Reflect101","Transparent","Isolated","Default","objdetect","ObjectDetect","detect","CascadeClassifier","new","from_path","load","detect_multiscale","detect_with_params","CSvmDetector","SvmDetector","default_people_detector","daimler_people_detector","HogParams","win_size","block_size","block_stride","cell_size","nbins","win_sigma","l2hys_threshold","gamma_correction","nlevels","hit_threshold","win_stride","padding","scale","group_threshold","use_meanshift_grouping","final_threshold","HogDescriptor","params","with_params","set_svm_detector","video","tracking","camshift","analysis","videoio","VideoCapture","CapProp","PosMsec","PosFrames","PosAviRatio","FrameWidth","FrameHeight","Fps","Fourcc","FrameCount","Format","Mode","Brightness","Contrast","Saturation","Hue","Gain","Exposure","ConvertRgb","WhiteBalanceBlueU","Rectification","Monochrome","Sharpness","AutoExposure","Gamma","Temperature","Trigger","TriggerDelay","WhiteBalanceRedV","Zoom","Focus","Guid","IsoSpeed","Backlight","Pan","Tilt","Roll","Iris","Settings","Buffersize","Autofocus","new","from_path","from_pipeline","is_open","read","set","get","VideoWriter","new","open","write","is_open","set","get","VideoWriterProperty","Quality","FrameBytes","NStripes","codec_name_from_4cc","codec_name_to_4cc","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","as_fail","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","compute","compare","from","into","borrow","borrow_mut","try_from","try_into","type_id","compute","compare","from","into","borrow","borrow_mut","try_from","try_into","type_id","compute","compare","from","into","borrow","borrow_mut","try_from","try_into","type_id","compute","compare","from","into","borrow","borrow_mut","try_from","try_into","type_id","compute","compare","from","into","borrow","borrow_mut","try_from","try_into","type_id","compute","compare","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","detect_and_compute","detect_and_compute","show","detect","detect","detect","detect","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","into","into","into","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","not","bitand","bitor","bitxor","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","name","cause","backtrace","new","add","cluster","new","add","train","is_empty","match_","match_two","knn_match","new","detect_regions","delta","min_area","max_area","max_variation","min_diversity","max_evolution","area_threshold","min_margin","edge_blur_size","new","features","octave_layers","contrast_threshold","edge_threshold","sigma","new","hessian_threshold","octaves","octave_layers","extended","upright","image_decode","image_encode","from_path","line","line_custom","rectangle","rectangle_custom","rectangle2f","ellipse","ellipse_custom","cvt_color","pyr_down","threshold","erode","dilate","gaussian_blur","resize_to","resize_by","calc_hist","calc_back_project","compare_hist","sobel","scharr","canny"],"q":["cv","cv::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::cuda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::errors","","","","","cv","cv::features2d","","","","","","","","","","","","","","","","","","","","cv","cv::hash","","","","","","","","","","","","","","","","cv","cv::highgui","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::imgcodecs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::imgproc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::mat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::objdetect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv","cv::video","cv::mat","cv::video","cv","cv::videoio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::cuda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::errors","","","","","","","","","cv::features2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::highgui","","","","","","","","","","","","","","","","","","cv::imgcodecs","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::imgproc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::mat","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::objdetect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::videoio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::features2d","","cv::mat","cv::cuda","","cv::objdetect","","cv::core","cv::cuda","","","cv::features2d","","","","","cv::hash","","","","","","cv::mat","cv::objdetect","","","cv::videoio","","cv::mat","cv::cuda","cv::features2d","","","cv::mat","cv::core","","","","","","","","","","","","","","cv::cuda","","","cv::features2d","","","","","","cv::highgui","","cv::imgcodecs","","","cv::imgproc","","","","cv::mat","","","cv::objdetect","","cv::videoio","","cv::core","","","","","","","","","cv::cuda","cv::features2d","","","","cv::objdetect","","cv::videoio","cv::core","","","","","","","cv::highgui","","cv::imgcodecs","","","cv::imgproc","","","","cv::videoio","","cv::core","","","","","","","","","","","","","","","cv::cuda","","","","","","cv::errors","cv::features2d","","","","","","","","","","","cv::hash","","","","","","cv::highgui","","cv::imgcodecs","","","cv::imgproc","","","","cv::mat","","","cv::objdetect","","","","","cv::videoio","","","","cv::errors","cv::mat","","","","cv::core","","","","","cv::highgui","","cv::imgcodecs","","","cv::imgproc","","","","cv::videoio","","cv::errors","","","cv::features2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cv::mat","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Core data structures in OpenCV","Data structure for salient point detectors","Coordinates of the keypoint","Diameter of the meaningful keypoint neighborhood","Computed orientation of the keypoint (-1 if not â€¦","The response by which the most strong keypoints have been â€¦","Octave (pyramid layer) from which the keypoint has been â€¦","Object class (if the keypoints need to be clustered by an â€¦","A 4-element struct that is widely used to pass pixel â€¦","Creates a new scalar object.","Creates a new scalar object with all value being the same.","2D integer points specified by its coordinates <code>x</code> and <code>y</code>.","x coordinate","y coordinate","Creats a new <code>Point2i</code>.","2D floating points specified by its coordinates <code>x</code> and <code>y</code>.","x coordinate","y coordinate","Creats a new <code>Point2f</code>.","<code>Size2i</code> struct is used for specifying the size of an image â€¦","width","height","Creates a new <code>Size2i</code> object with <code>width</code> and <code>height</code>","<code>Size2f</code> struct is used for specifying the size of an image â€¦","width","height","The <code>Rect</code> defines a rectangle in integer.","x coordinate of the left-top corner","y coordinate of the left-top corner","width of this rectangle","height of this rectangle","Creates a new <code>Rect</code> with (x, y, width, height) parameters.","Scales the rectangle by the specified ratio.","Normalize the rectangle according to the image (if the â€¦","The <code>Rect2f</code> are rectangles in float.","x coordinate of the left-top corner","y coordinate of the left-top corner","width of this rectangle","height of this rectangle","Normalize the rectangle according to the image. This will â€¦","Line type","Default type","4-connected line","8-connected line","antialiased line","A flag to specify how to flip the image. see Mat::flip","Along x-axis: dst[i, j] = src[src.rows - i - 1, j]","Along y-axis: dst[i, j] = src[i, src.cols - j - 1]","Along both axis: dst[i, j] = src[src.rows - i - 1, â€¦","Allow self deserialization from byte slice","Deserializes self from byte slice","Here is the <code>CvType</code> in an easy-to-read table.","8 bit unsigned, single channel (grey image)","8 bit signed, single channel (grey image)","16 bit unsigned, single channel (grey image)","16 bit signed, single channel (grey image)","32 bit signed, single channel (grey image)","32 bit float, single channel (grey image)","32 bit float, single channel (grey image)","8 bit, two channel (rarelly seen)","8 bit unsigned, three channels (RGB image)","8 bit signed, three channels (RGB image)","16 bit unsigned, three channels (RGB image)","16 bit signed, three channels (RGB image)","32 bit signed, three channels (RGB image)","32 bit float, three channels (RGB image)","32 bit float, three channels (RGB image)","This struct represents a rotated (i.e. not up-right) â€¦","Return 4 vertices of the rectangle.","Return the minimal up-right rectangle containing the â€¦","Normalization type. Please refer to OpenCVâ€™s â€¦","Normalized using <code>max</code>","Normalized using L1 distance","Normalized using L2 distance","Normalized using L2 sqr distance","Normalized using hamming distance","Normalized using hamming2 distance","Normalized using relative distance","Normalized using minmax distance","Term criteria type, can be one of: Count, Eps or Count + â€¦","The maximum number of iterations or elements to compute","the desired accuracy or change in parameters at which the â€¦","Termination criteria for iterative algorithms.","Creates a new termination criteria.","Bindings to OpenCVâ€™s classes and functions that â€¦","Opaque data struct for C/C++ cv::cuda::GpuMat bindings","<code>GpuMat</code> data structure in rust, bound to an opaque type in â€¦","Number of columns","Number of rows","Depth of this mat","Creates a default <code>GpuMat</code>.","Uploads a normal <code>Mat</code>","Opaque data struct for C bindings","Data structure that performs Histogram of Gradient (HOG).","Hog parameters.","Should return detection scores","Creates a new GpuHog detector.","Should or not return the detection score","Creates a new GpuHog detector with parameters specified â€¦","Sets the SVM detector.","Opaque data struct for C bindings","Data structure that performs object detection with a â€¦","Loads the classifier from a file.","Detects objects of different sizes in the input image.","Sets whether or not to find the only largest object.","Sets the maximum number of objects.","Sets minimal neighbors required for a detection to be â€¦","Sets the maximun object size.","Sets the minimal object size.","Sets the scale factor used in multiscale detection.","Returns the classifier size.","Returns if the CascadeClassifier will only return the â€¦","Returns the allowed maximal number of detected objects.","Returns the number of minimal neighbors required for a â€¦","Returns the maximum object size.","Returns the minimal object size.","Returns the scale factor.","Errors for OpenCV bindings","Custom errors that may happen during calls","Indicates that path was invalid","Indicates that there is no entry on specified path","Indicates that error occurred in C++ code","Indicates that string contains non ascii characters","Provide 2D image feature detectors and descriptor â€¦","K-means - based class to train visual vocabulary using â€¦","k-Means centers","Select random initial centers in each attempt.","Use kmeans++ center initialization by Arthur and â€¦","Type for matching keypoint descriptors","Descriptor matcher type","","","","","","Type for matching keypoint descriptors","Maximally stable extremal region extractor.","Builder that provides defaults for MSER","Speeded up robust features extractor.","Builder that provides defaults for MSER","Speeded up robust features extractor.","Builder that provides defaults for MSER","Basic trait for 2D image feature detectors and descriptor â€¦","Detects keypoints and computes the descriptors","The module brings implementations of different image â€¦","","Basic trait for all hash types","Computes image hash","Compares two image hashes","Computes average hash value of the input image","Creates new instance","Image hash based on block mean","Creates new instance","Image hash based on color moments","Creates new instance","Marr-Hildreth Operator Based Hash, slowest but more â€¦","Creates new instance","Slower than AverageHash, but tolerant of minor â€¦","Creates new instance","Image hash based on Radon transform","Creates new instance","highgui: high-level GUI","Create a window that can be used as a placeholder for â€¦","Destroy the specified window with the given name.","Pointer referring to the data used in MouseCallback","Callback function for mouse events, primarily used in â€¦","Set mouse handler for the specified window (identified by â€¦","Flags for highgui_named_window. This only supports a â€¦","the window can be resized (no constraint) or switched to â€¦","the window is constrained by the image displayed.","the window is with opengl support.","the window can be resized arbitrarily (no ratio â€¦","Mouse Events","Indicates that the mouse has moved over the window.","Indicates that the left mouse button is pressed.","Indicates that the right mouse button is pressed.","Indicates that the middle mouse button is pressed.","Indicates that left mouse button is released.","Indicates that right mouse button is released.","Indicates that middle mouse button is released.","Indicates that left mouse button is double clicked.","Indicates that right mouse button is double clicked.","Indicates that middle mouse button is double clicked.","Positive/negative means forward/backward scrolling.","Positive/negative means right and left scrolling.","Provides some highgui functionallity","Calls out to highgui to show the image, the duration is â€¦","Image file reading and writing, see OpenCV imgcodecs.","ImreadModes. See documentation for detauls","If set, return the loaded image as is (with alpha â€¦","If set, always convert image to the single channel â€¦","If set, always convert image to the 3 channel BGR color â€¦","If set, return 16-bit/32-bit image when the input has the â€¦","If set, the image is read in any possible color format.","If set, use the gdal driver for loading the image.","If set, always convert image to the single channel â€¦","If set, always convert image to the 3 channel BGR color â€¦","If set, always convert image to the single channel â€¦","If set, always convert image to the 3 channel BGR color â€¦","If set, always convert image to the single channel â€¦","If set, always convert image to the 3 channel BGR color â€¦","Imwrite flags. See documentation for detauls","For JPEG, it can be a quality from 0 to 100 (the higher â€¦","Enable JPEG features, 0 or 1, default is False.","Enable JPEG features, 0 or 1, default is False.","JPEG restart interval, 0 - 65535, default is 0 - no â€¦","Separate luma quality level, 0 - 100, default is 0 - donâ€¦","Separate chroma quality level, 0 - 100, default is 0 - donâ€¦","For PNG, it can be the compression level from 0 to 9. A â€¦","One of cv::ImwritePNGFlags, default is â€¦","Binary level PNG, 0 or 1, default is 0.","For PPM, PGM, or PBM, it can be a binary format flag, 0 â€¦","For WEBP, it can be a quality from 1 to 100 (the higher â€¦","For PAM, sets the TUPLETYPE field to the corresponding â€¦","Imwrite PNG flag. See documentation for detauls","Use this value for normal data.","Use this value for data produced by a filter (or â€¦","Use this value to force Huffman encoding only (no string â€¦","Use this value to limit match distances to one â€¦","Using this value prevents the use of dynamic Huffman â€¦","Image processing, see OpenCV imgproc.","Possible methods for histogram comparision method","HISTCMP_CORREL","HISTCMP_CHISQR","HISTCMP_INTERSECT","HISTCMP_BHATTACHARYYA <strong>and</strong> HISTCMP_HELLINGER","HISTCMP_CHISQR_ALT","HISTCMP_KL_DIV","ThresholdTypes used in threshold.","","","","","","","","","Color conversion code used in cvt_color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Interpolation algorithm","nearest neighbor interpolation","bilinear interpolation","bicubic interpolation","resampling using pixel area relation. It may be a â€¦","Lanczos interpolation over 8x8 neighborhood","Bit exact bilinear interpolation","mask for interpolation codes","flag, fills all of the destination image pixels. If some â€¦","flag, inverse transformation","Mat","The class <code>CMat</code> is used as a pointer to represent the Mat â€¦","The class <code>Mat</code> represents an n-dimensional dense numerical â€¦","Number of columns","Number of rows","Depth of this mat (it should be the type).","Channels of this mat","Loads <code>Mat</code> from file storage","Creates an empty <code>Mat</code> struct.","Creates a new <code>Mat</code> from buffer. Note that internally â€¦","Create an empty <code>Mat</code> with specific size (rows, cols and â€¦","Create an empty <code>Mat</code> with specific size (rows, cols and â€¦","Returns the raw data (as a <code>u8</code> pointer)","Returns the total number of array elements. The method â€¦","Returns the matrix element size in bytes.","Returns the size of each matrix element channel in bytes.","Returns a normalized step.","Returns the size of this matrix.","Check if the <code>Mat</code> is valid or not.","Return a region of interest from a <code>Mat</code> specfied by a <code>Rect</code>.","Flips an image around vertical, horizontal, or both axes.","Returns the images type. For supported types, please see â€¦","Returns an identity matrix of the specified size and type.","Returns individual pixel (element) information within the â€¦","Returns individual pixel (element) information within the â€¦","Returns individual pixel (element) information within the â€¦","Checks if Mat elements lie between the elements of two â€¦","Finds the global minimum and maximum in an array.","Copy specified channels from <code>self</code> to the specified â€¦","Normalize the Mat according to the normalization type.","Counts non-zero array elements.","Forms a border around an image.","Various border types, image boundaries are denoted with <code>|</code>.","<code>iiiiii|abcdefgh|iiiiiii</code>  with some specified <code>i</code>","<code>aaaaaa|abcdefgh|hhhhhhh</code>","<code>fedcba|abcdefgh|hgfedcb</code>","<code>cdefgh|abcdefgh|abcdefg</code>","<code>gfedcb|abcdefgh|gfedcba</code>","<code>uvwxyz|abcdefgh|ijklmno</code>","Do not look outside of ROI.","same as Reflect101","Various object detection algorithms, such as Haar â€¦","An object detect trait.","Detects the object inside this image and returns a list â€¦","Cascade classifier class for object detection.","Creates a cascade classifier, uninitialized. Before use, â€¦","Creates a cascade classifier using the model specified.","Loads the classifier model from a path.","The default detection uses scale factor 1.1, minNeighbors â€¦","Detects the object using parameters specified.","Opaque type for C/C++ SvmDetector object","SvmDetector","The built-in people detector.","Returns the Daimler people detector.","Parameters that controls the behavior of HOG.","Detection window size. Align to block size and block â€¦","Block size in pixels. Align to cell size. Only (16,16) is â€¦","Block stride. It must be a multiple of cell size.","Cell size. Only (8, 8) is supported for now.","Number of bins. Only 9 bins per cell are supported for â€¦","Gaussian smoothing window parameter. Default -1 for CPU â€¦","L2-Hys normalization method shrinkage. Default 0.2.","Flag to specify whether the gamma correction â€¦","Maximum number of detection window increases (HOG â€¦","Threshold for the distance between features and SVM â€¦","Window stride. It must be a multiple of block stride.","Padding","Coefficient of the detection window increase.","Coefficient to regulate the similarity threshold. When â€¦","The useMeanShiftGrouping parameter is a boolean â€¦","The <code>finalThreshold</code> parameter is mainly used to select the â€¦","<code>HogDescriptor</code> implements Histogram of Oriented Gradients.","Hog parameters.","Creates a HogDescriptor with provided parameters.","Sets the SVM detector.","Video Analysis, see OpenCV video","Object Tracking, see OpenCV video track","Finds an object center, size, and orientation; returns as â€¦","Motion Analysis, see OpenCV video motion","Media I/O, see OpenCV videoio","Video capturing from video files, image sequences or â€¦","Video captureâ€™s property identifier.","Current position of the video file in milliseconds or â€¦","0-based index of the frame to be decoded/captured next.","Relative position of the video file: 0 - start of the â€¦","Width of the frames in the video stream.","Height of the frames in the video stream.","Frame rate.","4-character code of codec.","Number of frames in the video file.","Format of the Mat objects returned by retrieve() .","Backend-specific value indicating the current capture â€¦","Brightness of the image (only for cameras).","Contrast of the image (only for cameras).","Saturation of the image (only for cameras).","Hue of the image (only for cameras).","Gain of the image (only for cameras).","Exposure (only for cameras).","Boolean flags indicating whether images should be â€¦","Currently not supported","Rectification flag for stereo cameras (note: only â€¦","","","","","","","","","","","","","","","","","","","","","Creates a capture device with specified camera id. If â€¦","Creates a capture device with the path of a video file â€¦","Create a capture device from a gstreamer pipeline (eg. â€¦","Returns true if video capturing has been initialized â€¦","Grabs, decodes and returns the next video frame. <code>read</code> â€¦","Sets a property in the <code>VideoCapture</code>.","Gets a property in the <code>VideoCapture</code>.","<code>VideoWriter</code> provides easy access to write videos to files.â€¦","<code>VideoWriter</code> constructor. -path â€“ Name of the output â€¦","<code>VideoWriter</code> constructor. -path â€“ Name of the output â€¦","Writes the specified image to video file. It must have â€¦","Returns true if video writer has been initialized already.","Sets a property in the <code>VideoWriter</code>. Note: â€¦","Gets a property in the <code>VideoWriter</code>.","<code>VideoWriter</code>â€™s property identifier.","Current quality of the encoded videostream.","(Read-only) Size of just encoded video frame; note that â€¦","Number of stripes for parallel encoding","Converts from four character code to <code>u32</code>","Converts to four character code from <code>u32</codeomputes image hash","Compares two image hashes","","","","","","","","Computes image hash","Compares two image hashes","","","","","","","","Computes image hash","Compares two image hashes","","","","","","","","Computes image hash","Compares two image hashes","","","","","","","","Computes image hash","Compares two image hashes","","","","","","","","Computes image hash","Compares two image hashesreates a new maximally stable extremal region extractor â€¦","Adds descriptors to a training set","Clusters train descriptors","Creates a descriptor matcher of a given type with the â€¦","Adds descriptors to train a CPU or GPU descriptor â€¦","Trains a descriptor matcher","Returns true if there are no train descriptors","Finds the best match for each descriptor from a query set","Finds the best match for each descriptor from a query set.â€¦","Finds the k best matches for each descriptor from a query â€¦","Creates a new maximally stable extremal region extractor â€¦","Detect MSER regions.","Replace current delta with specified value","Replace current min_area with specified value","Replace current max_area with specified value","Replace current max_variation with specified value","Replace current min_diversity with specified value","Replace current max_evolution with specified value","Replace current area_threshold with specified value","Replace current min_margin with specified value","Replace current edge_blur_size with specified value","Creates a new maximally stable extremal region extractor â€¦","Replace current features with specified value","Replace current octave_layers with specified value","Replace current contrast_threshold with specified value","Replace current edge_threshold with specified value","Replace current sigma with specified value","Creates a new maximally stable extremal region extractor â€¦","Replace current octave_layers with specified value","Replace current octave_layers with specified value","Replace current octave_layers with specified value","Replace current extended with specified value","Replace current delta with specified value","Decodes an image from <code>buf</code> according to the specified mode.","Encodes an image; the encoding scheme depends on the â€¦","Creates a <code>Mat</code> from reading the image specified by the â€¦","Draws a simple line.","Draws a line with custom color, thickness and linetype.","Draws a simple, thick, or filled up-right rectangle.","Draws a rectangle with custom color, thickness and â€¦","Draw a simple, thick, or filled up-right rectangle.","Draws a simple, thick ellipse","Draws a custom ellipse","Convert an image from one color space to another.","Blurs an image and downsamples it. This function performs â€¦","Threshold","Erode","Dilate","Gaussian Blur","Resizes an image.","Resizes an image.","Calculate a histogram of an image.","Calculate the back projection of a histogram. The â€¦","Compares two histograms. The function compare two â€¦","Calculates the first x- or y- image derivative using â€¦","Calculates the first x- or y- image derivative using â€¦","Performs canny edge detection"],"i":[0,0,1,1,1,1,1,1,0,2,2,0,3,3,3,0,4,4,4,0,5,5,5,0,6,6,0,7,7,7,7,7,7,7,0,8,8,8,8,8,0,9,9,9,9,0,10,10,10,0,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,0,14,14,14,14,14,14,14,14,0,15,15,0,16,0,0,0,17,17,17,17,17,0,0,18,18,18,18,18,18,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,20,20,20,20,0,0,0,21,21,0,0,22,22,22,22,22,0,0,0,0,0,0,0,0,23,0,0,0,24,24,0,25,0,26,0,27,0,28,0,29,0,30,0,0,0,0,0,0,0,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,0,33,0,0,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,0,0,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,0,0,43,0,44,44,44,44,44,0,0,45,45,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,0,0,41,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,0,50,50,50,50,50,50,0,51,51,51,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,52,52,52,52,52,52,52,52,52,17,17,17,17,17,17,17,53,53,53,53,53,53,53,53,53,18,18,18,18,18,18,18,54,54,54,54,54,54,54,54,54,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,55,55,55,55,55,55,55,21,21,21,21,21,21,21,21,21,56,56,56,56,56,56,56,56,56,22,22,22,22,22,22,22,22,22,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,64,64,64,64,64,64,64,64,64,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,44,44,44,44,44,44,44,65,65,65,65,65,65,65,65,65,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,49,49,49,49,49,49,49,48,48,48,48,48,48,48,48,48,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,60,62,41,18,19,44,47,16,17,18,19,55,57,58,60,62,25,26,27,28,29,30,41,44,45,47,49,50,41,17,59,61,63,41,1,2,3,4,5,6,7,8,9,10,12,13,14,15,52,53,54,21,56,22,59,61,63,31,32,34,35,36,37,38,39,40,64,42,41,65,46,48,51,1,2,3,4,5,6,7,8,13,18,56,59,61,63,46,47,50,7,7,9,10,12,14,15,31,32,34,35,36,37,38,39,40,48,51,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,52,17,53,18,54,19,20,55,21,56,22,57,58,59,60,61,62,63,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,64,41,42,44,65,45,46,47,49,48,50,51,20,41,41,41,41,9,10,12,14,15,31,32,34,35,36,37,38,39,40,48,51,20,20,20,55,55,55,57,57,57,57,57,57,57,58,58,59,59,59,59,59,59,59,59,59,60,61,61,61,61,61,62,63,63,63,63,63,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41],"f":[null,null,null,null,null,null,null,null,null,[[["c_int",6]]],[[["c_int",6]]],null,null,null,[[["c_int",6]]],null,null,null,[[["f32",15]]],null,null,null,[[["c_int",6]]],null,null,null,null,null,null,null,null,[[["c_int",6]]],[[["f32",15]],["rect",3]],[[["mat",3]],["rect2f",3]],null,null,null,null,null,[[["mat",3]],["rect",3]],null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["rect",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6],["f64",15],["termtype",4]]],null,null,null,null,null,null,[[],["gpumat",3]],[[["mat",3]]],null,null,null,null,[[["c_int",6],["size2i",3]],["gpuhog",3]],[[["bool",15]]],[[["hogparams",3]],["gpuhog",3]],[[["svmdetector",3]]],null,null,[[["asref",8],["path",3]],[["result",4],["error",3]]],[[["gpumat",3]],[["vec",3],["rect",3]]],[[["bool",15]]],[[["c_int",6]]],[[["c_int",6]]],[[["size2i",3]]],[[["size2i",3]]],[[["f64",15]]],[[],["size2i",3]],[[],["bool",15]],[[],["c_int",6]],[[],["c_int",6]],[[],["size2i",3]],[[],["size2i",3]],[[],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["mat",3]]],null,null,null,[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[["windowflag",4],["str",15]],[["error",3],["result",4]]],[[["str",15]]],null,null,[[["mousecallback",6],["str",15]],[["error",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6],["str",15]],[["error",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["asref",8],["path",3],["str",15]],[["error",3],["result",4],["mat",3]]],[[],["mat",3]],[[["c_int",6],["cvtype",4]],["mat",3]],[[["c_int",6]]],[[["c_int",6]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["c_int",6]],["usize",15]],[[],["size2i",3]],[[],["bool",15]],[[["rect",3]],["mat",3]],[[["flipcode",4]]],[[],["cvtype",4]],[[["cvtype",4],["i32",15]],["mat",3]],[[["i32",15]],["frombytes",8]],[[["i32",15]],["frombytes",8]],[[["i32",15]],["frombytes",8]],[[["scalar",3]],["mat",3]],[[["mat",3]]],[[["usize",15],["asref",8]],["mat",3]],[[["f64",15],["normtype",4]],["mat",3]],[[],["c_int",6]],[[["scalar",3],["bordertype",4],["i32",15]],["mat",3]],null,null,null,null,null,null,null,null,null,null,null,[[["mat",3]],["vec",3]],null,[[],["cascadeclassifier",3]],[[["asref",8],["path",3]],[["result",4],["error",3]]],[[["asref",8],["path",3]],[["error",3],["result",4]]],[[["mat",3]],[["vec",3],["rect",3]]],[[["f32",15],["mat",3],["c_int",6],["size2i",3]],[["vec",3],["rect",3]]],null,null,[[],["svmdetector",3]],[[],["svmdetector",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["hogparams",3]],["hogdescriptor",3]],[[["svmdetector",3]]],null,null,[[["rect",3],["termcriteria",3]],["rotatedrect",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]]],[[["str",15]]],[[["str",15]]],[[],["bool",15]],[[],[["option",4],["mat",3]]],[[["f64",15],["capprop",4]],["bool",15]],[[["capprop",4]],[["f64",15],["option",4]]],null,[[["f64",15],["c_int",6],["bool",15],["size2i",3],["str",15]],["videowriter",3]],[[["f64",15],["c_int",6],["bool",15],["size2i",3],["str",15]],["bool",15]],[[["mat",3]]],[[],["bool",15]],[[["videowriterproperty",4],["f64",15]],["bool",15]],[[["videowriterproperty",4]],[["f64",15],["option",4]]],null,null,null,null,[[["str",15]],[["u32",15],["result",4],["error",3]]],[[["u32",15]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["fail",8]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]],["mat",3]],[[["mat",3]],["f64",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mat",3]]],[[["mat",3]]],[[["c_int",6],["str",15]],[["error",3],["result",4]]],[[["mat",3]],["vec",3]],[[["mat",3]],["vec",3]],[[["mat",3]],["vec",3]],[[["mat",3]],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["gpumat",3]],["mat",3]],[[["mat",3]],["gpumat",3]],[[],["mser",3]],[[],["sift",3]],[[],["surf",3]],[[],["cmat",4]],[[],["keypoint",3]],[[],["scalar",3]],[[],["point2i",3]],[[],["point2f",3]],[[],["size2i",3]],[[],["size2f",3]],[[],["rect",3]],[[],["rect2f",3]],[[],["linetype",4]],[[],["flipcode",4]],[[],["cvtype",4]],[[],["rotatedrect",3]],[[],["normtype",4]],[[],["termtype",4]],[[],["cgpumat",4]],[[],["cgpuhog",4]],[[],["cgpucascade",4]],[[],["kmeanscenters",4]],[[],["dmatch",3]],[[],["descriptormatchertype",4]],[[],["mserbuilder",3]],[[],["siftbuilder",3]],[[],["surfbuilder",3]],[[],["windowflag",4]],[[],["mouseeventtype",4]],[[],["imagereadmode",4]],[[],["imagewritemode",4]],[[],["imagewritepngstrategy",4]],[[],["histogramcomparisionmethod",4]],[[],["thresholdtype",4]],[[],["colorconversion",4]],[[],["interpolationflag",4]],[[],["cmat",4]],[[],["bordertype",4]],[[]],[[],["csvmdetector",4]],[[],["hogparams",3]],[[],["capprop",4]],[[],["videowriterproperty",4]],[[],["keypoint",3]],[[],["scalar",3]],[[],["point2i",3]],[[],["point2f",3]],[[],["size2i",3]],[[],["size2f",3]],[[],["rect",3]],[[],["rect2f",3]],[[],["rotatedrect",3]],[[],["gpuhog",3]],[[],["dmatch",3]],[[],["mserbuilder",3]],[[],["siftbuilder",3]],[[],["surfbuilder",3]],[[],["hogparams",3]],[[],["hogdescriptor",3]],[[],["videowriter",3]],[[["rect",3]],["bool",15]],[[["rect",3]],["bool",15]],[[["linetype",4]],["bool",15]],[[["flipcode",4]],["bool",15]],[[["cvtype",4]],["bool",15]],[[["normtype",4]],["bool",15]],[[["termtype",4]],["bool",15]],[[["windowflag",4]],["bool",15]],[[["mouseeventtype",4]],["bool",15]],[[["imagereadmode",4]],["bool",15]],[[["imagewritemode",4]],["bool",15]],[[["imagewritepngstrategy",4]],["bool",15]],[[["histogramcomparisionmethod",4]],["bool",15]],[[["thresholdtype",4]],["bool",15]],[[["colorconversion",4]],["bool",15]],[[["interpolationflag",4]],["bool",15]],[[["capprop",4]],["bool",15]],[[["videowriterproperty",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["str",15]]],[[],[["option",4],["fail",8]]],[[],[["option",4],["backtrace",3]]],[[["termcriteria",3],["kmeanscenters",4],["i32",15]]],[[["mat",3]]],[[],["mat",3]],[[["descriptormatchertype",4]],["descriptormatcher",3]],[[["vec",3]]],[[]],[[],["bool",15]],[[["mat",3]],[["vec",3],["dmatch",3]]],[[["mat",3]],[["vec",3],["dmatch",3]]],[[["mat",3],["usize",15]],[["vec",3],["vec",3]]],[[["c_int",6],["f64",15]]],[[["mat",3]]],[[["c_int",6]]],[[["c_int",6]]],[[["c_int",6]]],[[["f64",15]]],[[["f64",15]]],[[["c_int",6]]],[[["f64",15]]],[[["f64",15]]],[[["c_int",6]]],[[["c_int",6],["f64",15]]],[[["c_int",6]]],[[["c_int",6]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15],["c_int",6],["bool",15]]],[[["f64",15]]],[[["c_int",6]]],[[["c_int",6]]],[[["bool",15]]],[[["bool",15]]],[[["imagereadmode",4]],["mat",3]],[[["vec",3],["imagewritemode",4],["str",15]],[["vec",3],["error",3],["result",4]]],[[["asref",8],["imagereadmode",4],["path",3]],[["error",3],["result",4],["mat",3]]],[[["point2i",3]]],[[["point2i",3],["linetype",4],["c_int",6],["scalar",3]]],[[["rect",3]]],[[["rect",3],["linetype",4],["c_int",6],["scalar",3]]],[[["rect2f",3]]],[[["point2i",3],["f64",15],["size2i",3]]],[[["point2i",3],["f64",15],["linetype",4],["c_int",6],["size2i",3],["scalar",3]]],[[["colorconversion",4]],["mat",3]],[[],["mat",3]],[[["f64",15],["thresholdtype",4]],["mat",3]],[[["point2i",3],["i32",15],["mat",3],["bordertype",4],["scalar",3]],["mat",3]],[[["point2i",3],["i32",15],["mat",3],["bordertype",4],["scalar",3]],["mat",3]],[[["f64",15],["size2i",3],["bordertype",4]],["mat",3]],[[["size2i",3],["interpolationflag",4]],["mat",3]],[[["f64",15],["interpolationflag",4]],["mat",3]],[[["asref",8],["mat",3],["asref",8]],["mat",3]],[[["asref",8],["mat",3],["asref",8]],["mat",3]],[[["mat",3],["histogramcomparisionmethod",4]],[["f64",15],["string",3],["result",4]]],[[["f64",15],["bordertype",4],["i32",15]],["mat",3]],[[["f64",15],["bordertype",4],["i32",15]],["mat",3]],[[["f64",15],["bool",15],["i32",15]],[["mat",3],["string",3],["result",4]]]],"p":[[3,"KeyPoint"],[3,"Scalar"],[3,"Point2i"],[3,"Point2f"],[3,"Size2i"],[3,"Size2f"],[3,"Rect"],[3,"Rect2f"],[4,"LineType"],[4,"FlipCode"],[8,"FromBytes"],[4,"CvType"],[3,"RotatedRect"],[4,"NormType"],[4,"TermType"],[3,"TermCriteria"],[3,"GpuMat"],[3,"GpuHog"],[3,"GpuCascade"],[4,"CvError"],[4,"KMeansCenters"],[4,"DescriptorMatcherType"],[8,"Feature2D"],[8,"Hash"],[3,"AverageHash"],[3,"BlockMeanHash"],[3,"ColorMomentHash"],[3,"MarrHildrethHash"],[3,"PHash"],[3,"RadialVarianceHash"],[4,"WindowFlag"],[4,"MouseEventType"],[8,"Show"],[4,"ImageReadMode"],[4,"ImageWriteMode"],[4,"ImageWritePngStrategy"],[4,"HistogramComparisionMethod"],[4,"ThresholdType"],[4,"ColorConversion"],[4,"InterpolationFlag"],[3,"Mat"],[4,"BorderType"],[8,"ObjectDetect"],[3,"CascadeClassifier"],[3,"SvmDetector"],[3,"HogParams"],[3,"HogDescriptor"],[4,"CapProp"],[3,"VideoCapture"],[3,"VideoWriter"],[4,"VideoWriterProperty"],[4,"CGpuMat"],[4,"CGpuHog"],[4,"CGpuCascade"],[3,"BOWKMeansTrainer"],[3,"DMatch"],[3,"DescriptorMatcher"],[3,"MSER"],[3,"MSERBuilder"],[3,"SIFT"],[3,"SIFTBuilder"],[3,"SURF"],[3,"SURFBuilder"],[4,"CMat"],[4,"CSvmDetector"]]}\
}');
initSearch(searchIndex);